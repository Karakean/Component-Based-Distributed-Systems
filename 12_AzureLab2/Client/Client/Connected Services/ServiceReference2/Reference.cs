//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReference2 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InitializeDatabase", ReplyAction="http://tempuri.org/IService1/InitializeDatabaseResponse")]
        bool InitializeDatabase();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InitializeDatabase", ReplyAction="http://tempuri.org/IService1/InitializeDatabaseResponse")]
        System.Threading.Tasks.Task<bool> InitializeDatabaseAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Create", ReplyAction="http://tempuri.org/IService1/CreateResponse")]
        bool Create(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Create", ReplyAction="http://tempuri.org/IService1/CreateResponse")]
        System.Threading.Tasks.Task<bool> CreateAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Login", ReplyAction="http://tempuri.org/IService1/LoginResponse")]
        System.Guid Login([System.ServiceModel.MessageParameterAttribute(Name="login")] string login1, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Login", ReplyAction="http://tempuri.org/IService1/LoginResponse")]
        System.Threading.Tasks.Task<System.Guid> LoginAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Logout", ReplyAction="http://tempuri.org/IService1/LogoutResponse")]
        bool Logout(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Logout", ReplyAction="http://tempuri.org/IService1/LogoutResponse")]
        System.Threading.Tasks.Task<bool> LogoutAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Put", ReplyAction="http://tempuri.org/IService1/PutResponse")]
        bool Put(string name, string content, System.Guid sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Put", ReplyAction="http://tempuri.org/IService1/PutResponse")]
        System.Threading.Tasks.Task<bool> PutAsync(string name, string content, System.Guid sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Get", ReplyAction="http://tempuri.org/IService1/GetResponse")]
        string Get(string name, System.Guid sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Get", ReplyAction="http://tempuri.org/IService1/GetResponse")]
        System.Threading.Tasks.Task<string> GetAsync(string name, System.Guid sessionId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Client.ServiceReference2.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Client.ServiceReference2.IService1>, Client.ServiceReference2.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool InitializeDatabase() {
            return base.Channel.InitializeDatabase();
        }
        
        public System.Threading.Tasks.Task<bool> InitializeDatabaseAsync() {
            return base.Channel.InitializeDatabaseAsync();
        }
        
        public bool Create(string login, string password) {
            return base.Channel.Create(login, password);
        }
        
        public System.Threading.Tasks.Task<bool> CreateAsync(string login, string password) {
            return base.Channel.CreateAsync(login, password);
        }
        
        public System.Guid Login(string login1, string password) {
            return base.Channel.Login(login1, password);
        }
        
        public System.Threading.Tasks.Task<System.Guid> LoginAsync(string login, string password) {
            return base.Channel.LoginAsync(login, password);
        }
        
        public bool Logout(string login) {
            return base.Channel.Logout(login);
        }
        
        public System.Threading.Tasks.Task<bool> LogoutAsync(string login) {
            return base.Channel.LogoutAsync(login);
        }
        
        public bool Put(string name, string content, System.Guid sessionId) {
            return base.Channel.Put(name, content, sessionId);
        }
        
        public System.Threading.Tasks.Task<bool> PutAsync(string name, string content, System.Guid sessionId) {
            return base.Channel.PutAsync(name, content, sessionId);
        }
        
        public string Get(string name, System.Guid sessionId) {
            return base.Channel.Get(name, sessionId);
        }
        
        public System.Threading.Tasks.Task<string> GetAsync(string name, System.Guid sessionId) {
            return base.Channel.GetAsync(name, sessionId);
        }
    }
}
